basePath: /v1
consumes:
    - application/json
definitions:
    confirmMfaRequest:
        properties:
            secret:
                type: string
                x-go-name: Secret
            totp:
                type: string
                x-go-name: TOTP
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    confirmMfaResponse:
        properties:
            recovery_codes:
                items:
                    type: string
                type: array
                x-go-name: RecoveryCodes
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    createPostRequest:
        properties:
            body:
                type: string
                x-go-name: Body
            title:
                type: string
                x-go-name: Title
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    createPostResponse:
        properties:
            body:
                type: string
                x-go-name: Body
            id:
                format: int64
                type: integer
                x-go-name: ID
            title:
                type: string
                x-go-name: Title
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    errorResponse:
        properties:
            error:
                description: Error response model
                type: string
                x-go-name: Error
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    getPersonalPostsResponse:
        properties:
            posts:
                items: {}
                type: array
                x-go-name: Posts
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    loginRequest:
        properties:
            password:
                description: Password for this user
                minLength: 8
                type: string
                x-go-name: Password
            username:
                description: Username for this user
                maxLength: 50
                minLength: 3
                type: string
                x-go-name: Username
        required:
            - username
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    mfaLoginRequest:
        properties:
            password:
                description: Password for this user
                minLength: 8
                type: string
                x-go-name: Password
            totp:
                description: TOTP code from an authenticator app
                maxLength: 6
                type: string
                x-go-name: TOTP
            username:
                description: Username for this user
                maxLength: 50
                minLength: 3
                type: string
                x-go-name: Username
        required:
            - username
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    recoveryLoginRequest:
        properties:
            password:
                description: Password for this user
                minLength: 8
                type: string
                x-go-name: Password
            recovery_code:
                description: Recovery code
                maxLength: 7
                type: string
                x-go-name: RecoveryCode
            username:
                description: Username for this user
                maxLength: 50
                minLength: 3
                type: string
                x-go-name: Username
        required:
            - username
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    refreshTokenRequest:
        properties:
            refresh_token:
                description: User's refresh token
                type: string
                x-go-name: RefreshToken
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    registerRequest:
        properties:
            email:
                description: Email for this user
                type: string
                x-go-name: Email
            password:
                description: Password for this user
                minLength: 8
                type: string
                x-go-name: Password
            username:
                description: Username for this user
                maxLength: 50
                minLength: 3
                type: string
                x-go-name: Username
        required:
            - username
            - email
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    setupMfaHandlerResponse:
        properties:
            secret:
                description: TOTP Secret
                type: string
                x-go-name: Secret
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    tokenPair:
        properties:
            access_token:
                description: user's access token
                type: string
                x-go-name: AccessToken
            refresh_token:
                description: user's refresh token
                type: string
                x-go-name: RefreshToken
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    updatePostRequest:
        properties:
            body:
                type: string
                x-go-name: Body
            title:
                type: string
                x-go-name: Title
        type: object
        x-go-package: github.com/XiovV/blog-api/server
    updatePostResponse:
        properties:
            body:
                type: string
                x-go-name: Body
            id:
                format: int64
                type: integer
                x-go-name: ID
            title:
                type: string
                x-go-name: Title
        type: object
        x-go-package: github.com/XiovV/blog-api/server
host: localhost
info:
    description: The purpose of this application is to provide an application
    title: defines the blog api.
    version: 0.0.1
paths:
    /posts:
        delete:
            operationId: deletePost
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - format: int32
                  in: query
                  name: post id
                  type: integer
            produces:
                - application/json
            responses:
                "200":
                    description: Post deleted successfully.
                "403":
                    description: The access token is invalid or the permissions are insufficient to perform this action.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "404":
                    description: The post could not be found.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Deletes a post.
            tags:
                - post
        post:
            operationId: createPost
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - format: int32
                  in: query
                  name: post id
                  type: integer
            produces:
                - application/json
            responses:
                "200":
                    description: The requested post is returned.
                    schema:
                        $ref: '#/definitions/createPostResponse'
                "400":
                    description: Input is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "403":
                    description: The access token is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Creates a post and returns the created post.
            tags:
                - post
    /posts/{postId}:
        put:
            operationId: editPost
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - format: int64
                  in: path
                  name: postId
                  required: true
                  type: integer
                - in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/updatePostRequest'
            produces:
                - application/json
            responses:
                "200":
                    description: Post updated successfully.
                    schema:
                        $ref: '#/definitions/updatePostResponse'
                "403":
                    description: The access token is invalid or the permissions are insufficient to perform this action.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "404":
                    description: Post not found.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Edits a user.
            tags:
                - post
    /posts/user/{username}:
        get:
            operationId: getUserPosts
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - format: int64
                  in: path
                  name: username
                  required: true
                  type: integer
                - format: int32
                  in: query
                  name: page
                  type: integer
                - format: int32
                  in: query
                  name: limit
                  type: integer
            produces:
                - application/json
            responses:
                "200":
                    description: User's posts are returned.
                    schema:
                        $ref: '#/definitions/getPersonalPostsResponse'
                "403":
                    description: The access token is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "404":
                    description: User doesn't have any posts.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Returns user's posts.
            tags:
                - post
    /users/{userId}:
        delete:
            operationId: deleteUser
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - format: int64
                  in: path
                  name: userId
                  required: true
                  type: integer
            produces:
                - application/json
            responses:
                "200":
                    description: User deleted successfully.
                "403":
                    description: The access token is invalid or the permissions are insufficient to perform this action.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Deletes a user.
            tags:
                - user
    /users/login:
        post:
            description: If the user has 2FA enabled, 302 Found will be returned, in which case POST /users/login/mfa should be used to log the user in.
            operationId: loginUser
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/loginRequest'
            produces:
                - application/json
            responses:
                "200":
                    description: user successfully logged in
                    schema:
                        $ref: '#/definitions/tokenPair'
                "302":
                    description: User has 2FA enabled and needs to call POST /users/login/mfa. Only the status code is returned without a body.
                "400":
                    description: Input is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Checks if the login credentials are correct and returns the access and refresh tokens.
            tags:
                - user
    /users/login/mfa:
        post:
            description: |-
                A 400 Bad Request status code and error message will be returned if the user doesn't have 2FA enabled, so only use this if the user
                has 2FA enabled on their account.
            operationId: loginUserMfa
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/mfaLoginRequest'
            produces:
                - application/json
            responses:
                "200":
                    description: User successfully logged in.
                    schema:
                        $ref: '#/definitions/tokenPair'
                "400":
                    description: Input is either invalid, or user doesn't have 2FA enabled.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Checks if the login credentials and totp code are correct and returns the access and refresh tokens.
            tags:
                - user
    /users/login/recovery:
        post:
            operationId: loginUserRecovery
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/recoveryLoginRequest'
            produces:
                - application/json
            responses:
                "200":
                    description: User successfully logged in.
                    schema:
                        $ref: '#/definitions/tokenPair'
                "400":
                    description: Input is either invalid, or the provided recovery code is incorrect.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            security:
                - access_token: []
            summary: Checks if the login credentials and recovery code are correct and returns the access and refresh tokens.
            tags:
                - user
    /users/mfa:
        post:
            operationId: setupMfa
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
            produces:
                - application/json
            responses:
                "200":
                    description: TOTP Secret is returned.
                    schema:
                        $ref: '#/definitions/setupMfaHandlerResponse'
                "403":
                    description: The access token is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Returns the secret used for generating TOTP codes.
            tags:
                - user
    /users/mfa/confirm:
        post:
            operationId: confirmMfa
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/confirmMfaRequest'
            produces:
                - application/json
            responses:
                "200":
                    description: Recovery codes are returned.
                    schema:
                        $ref: '#/definitions/confirmMfaResponse'
                "400":
                    description: Input is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "403":
                    description: The access token is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Checks if the provided TOTP code is correct and returns an array of recovery codes.
            tags:
                - user
    /users/posts:
        get:
            operationId: getPersonalPosts
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - format: int32
                  in: query
                  name: page
                  type: integer
                - format: int32
                  in: query
                  name: limit
                  type: integer
            produces:
                - application/json
            responses:
                "200":
                    description: User's posts are returned.
                    schema:
                        $ref: '#/definitions/getPersonalPostsResponse'
                "403":
                    description: The access token is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "404":
                    description: User doesn't have any posts.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Returns user's posts.
            tags:
                - user
    /users/register:
        post:
            description: If everything has gone well, access and refresh tokens will be returned.
            operationId: registerUser
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/registerRequest'
            produces:
                - application/json
            responses:
                "200":
                    description: User successfully registered.
                    schema:
                        $ref: '#/definitions/tokenPair'
                "400":
                    description: Input is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "409":
                    description: A user with the provided username or email is already exists.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Registers a user into the platform if the username and email haven't already been taken.
            tags:
                - user
    /users/token/refresh:
        post:
            operationId: refreshTokens
            parameters:
                - in: header
                  name: access_token
                  required: true
                  type: string
                - in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/refreshTokenRequest'
            produces:
                - application/json
            responses:
                "200":
                    description: New access token and refresh tokens are returned.
                    schema:
                        $ref: '#/definitions/tokenPair'
                "400":
                    description: Input is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "403":
                    description: The access token or refresh token is invalid.
                    schema:
                        $ref: '#/definitions/errorResponse'
                "500":
                    description: Internal server error.
                    schema:
                        $ref: '#/definitions/errorResponse'
            summary: Refreshes the user's tokens.
            tags:
                - user
produces:
    - application/json
schemes:
    - https
security:
    - access_token: []
securityDefinitions:
    access_token:
        in: header
        name: KEY
        type: apiKey
swagger: "2.0"
