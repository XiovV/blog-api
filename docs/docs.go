// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/posts/": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post"
                ],
                "summary": "Creates a post",
                "parameters": [
                    {
                        "description": "Create post body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.createPostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.createPostResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/posts/user/{username}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post"
                ],
                "summary": "Gets a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.getPersonalPostsResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid or the permissions for performing this action are insufficient",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "404": {
                        "description": "User has no posts",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{postId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post"
                ],
                "summary": "Gets a post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "post id",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.getPostResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "404": {
                        "description": "A post with the provided id doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post"
                ],
                "summary": "Edits a post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "post id",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Edit post body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.updatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.updatePostResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid or the permissions for performing this action are insufficient",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "404": {
                        "description": "User has no posts",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "post"
                ],
                "summary": "Deletes a post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "post id",
                        "name": "postId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post deleted successfully"
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid or the permissions for performing this action are insufficient",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "404": {
                        "description": "A post with the provided id doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "If the user has 2FA enabled, 302 Found will be returned, in which case POST /users/login/mfa should be used to log the user in.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Checks if the login credentials are correct and returns the access and refresh tokens.",
                "parameters": [
                    {
                        "description": "Login user body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.loginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.tokenPair"
                        }
                    },
                    "302": {
                        "description": "User has 2FA enabled and needs to call POST /users/login/mfa."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/login/mfa": {
            "post": {
                "description": "Checks if the login credentials and totp code are correct and returns the access and refresh tokens. A 400 Bad Request status code and error message will be returned if the user doesn't have 2FA enabled, so only use this if the user has 2FA enabled on their account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Checks if the login credentials and totp code are correct and returns the access and refresh tokens.",
                "parameters": [
                    {
                        "description": "Login user body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.mfaLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.tokenPair"
                        }
                    },
                    "400": {
                        "description": "Input is either invalid, or user doesn't have 2FA enabled.",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/login/recovery": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Checks if the login credentials and recovery code are correct and returns the access and refresh tokens.",
                "parameters": [
                    {
                        "description": "Login user body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.recoveryLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.tokenPair"
                        }
                    },
                    "400": {
                        "description": "Input is either invalid, or the provided recovery code is incorrect.",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/mfa": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Returns the secret used for generating TOTP codes.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.setupMfaHandlerResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/mfa/confirm": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Checks if the provided TOTP code is correct and returns an array of recovery codes.",
                "parameters": [
                    {
                        "description": "Login user body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.confirmMfaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.confirmMfaResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/password-reset": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Resets the user's password.",
                "parameters": [
                    {
                        "description": "Reset password body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.resetUserPasswordRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "password reset token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.messageResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "Password reset token is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Creates a password reset token and sends an email with password reset instructions.",
                "parameters": [
                    {
                        "description": "Create password reset token body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.createPasswordResetTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.messageResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/posts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Returns user's posts.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.getPersonalPostsResponse"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "404": {
                        "description": "User has no posts",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Registers a user into the platform if the username and email haven't already been taken.",
                "parameters": [
                    {
                        "description": "Register user body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.registerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.tokenPair"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "409": {
                        "description": "User with this username or email already exists",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/token/refresh": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Return a fresh pair of tokens.",
                "parameters": [
                    {
                        "description": "Refresh token body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.refreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.tokenPair"
                        }
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token or refresh token is invalid.",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Returns user's posts.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "Input is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "403": {
                        "description": "The access token is invalid",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "server.confirmMfaRequest": {
            "type": "object",
            "properties": {
                "secret": {
                    "type": "string"
                },
                "totp": {
                    "type": "string"
                }
            }
        },
        "server.confirmMfaResponse": {
            "type": "object",
            "properties": {
                "recovery_codes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "server.createPasswordResetTokenRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "server.createPostRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "server.createPostResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "server.errorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error response model",
                    "type": "string"
                }
            }
        },
        "server.getPersonalPostsResponse": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.personalPosts"
                    }
                }
            }
        },
        "server.getPostResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "server.loginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "server.messageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message response model",
                    "type": "string"
                }
            }
        },
        "server.mfaLoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "totp": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "server.personalPosts": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "server.recoveryLoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "recovery_code": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "server.refreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "server.registerRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "server.resetUserPasswordRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "server.setupMfaHandlerResponse": {
            "type": "object",
            "properties": {
                "secret": {
                    "type": "string"
                }
            }
        },
        "server.tokenPair": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "user's access token",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "user's refresh token",
                    "type": "string"
                }
            }
        },
        "server.updatePostRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "server.updatePostResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Simple Blog API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
